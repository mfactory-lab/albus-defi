/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
export type MintInstructionArgs = {
  poolTokenAmount: beet.bignum
}
/**
 * @category Instructions
 * @category Mint
 * @category generated
 */
export const mintStruct = new beet.BeetArgsStruct<
  MintInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['poolTokenAmount', beet.u64],
  ],
  'MintInstructionArgs'
)
/**
 * Accounts required by the _mint_ instruction
 *
 * @property [_writable_] sourceTokenA
 * @property [_writable_] sourceTokenB
 * @property [_writable_] tokenA
 * @property [_writable_] tokenB
 * @property [_writable_] poolMint
 * @property [] poolToken
 * @property [_writable_] poolFee
 * @property [] tokenSwap
 * @property [] tokenSwapAuthority
 * @property [] authority
 * @property [] tokenSwapProgram
 * @category Instructions
 * @category Mint
 * @category generated
 */
export type MintInstructionAccounts = {
  sourceTokenA: web3.PublicKey
  sourceTokenB: web3.PublicKey
  tokenA: web3.PublicKey
  tokenB: web3.PublicKey
  poolMint: web3.PublicKey
  poolToken: web3.PublicKey
  poolFee: web3.PublicKey
  tokenSwap: web3.PublicKey
  tokenSwapAuthority: web3.PublicKey
  authority: web3.PublicKey
  tokenProgram?: web3.PublicKey
  tokenSwapProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const mintInstructionDiscriminator = [
  51, 57, 225, 47, 182, 146, 137, 166,
]

/**
 * Creates a _Mint_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Mint
 * @category generated
 */
export function createMintInstruction(
  accounts: MintInstructionAccounts,
  args: MintInstructionArgs,
  programId = new web3.PublicKey('GEKHqpoYKtPZusV2CS7fjcfStszxDUGsnuZXonxd5tba')
) {
  const [data] = mintStruct.serialize({
    instructionDiscriminator: mintInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.sourceTokenA,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sourceTokenB,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenA,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenB,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.poolMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.poolToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.poolFee,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenSwap,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenSwapAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenSwapProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
