/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category SwapAToP
 * @category generated
 */
export type SwapAToPInstructionArgs = {
  sourceTokenAmount: beet.bignum
  minimumPoolTokenAmount: beet.bignum
}
/**
 * @category Instructions
 * @category SwapAToP
 * @category generated
 */
export const swapAToPStruct = new beet.BeetArgsStruct<
  SwapAToPInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['sourceTokenAmount', beet.u64],
    ['minimumPoolTokenAmount', beet.u64],
  ],
  'SwapAToPInstructionArgs'
)
/**
 * Accounts required by the _swapAToP_ instruction
 *
 * @property [_writable_] sourceTokenA
 * @property [_writable_] tokenA
 * @property [_writable_] tokenB
 * @property [_writable_] poolMint
 * @property [_writable_] poolToken
 * @property [] tokenSwap
 * @property [] tokenSwapAuthority
 * @property [] authority
 * @property [] tokenSwapProgram
 * @category Instructions
 * @category SwapAToP
 * @category generated
 */
export type SwapAToPInstructionAccounts = {
  sourceTokenA: web3.PublicKey
  tokenA: web3.PublicKey
  tokenB: web3.PublicKey
  poolMint: web3.PublicKey
  poolToken: web3.PublicKey
  tokenSwap: web3.PublicKey
  tokenSwapAuthority: web3.PublicKey
  authority: web3.PublicKey
  tokenProgram?: web3.PublicKey
  tokenSwapProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const swapAToPInstructionDiscriminator = [
  227, 176, 3, 48, 46, 179, 89, 166,
]

/**
 * Creates a _SwapAToP_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SwapAToP
 * @category generated
 */
export function createSwapAToPInstruction(
  accounts: SwapAToPInstructionAccounts,
  args: SwapAToPInstructionArgs,
  programId = new web3.PublicKey('GEKHqpoYKtPZusV2CS7fjcfStszxDUGsnuZXonxd5tba')
) {
  const [data] = swapAToPStruct.serialize({
    instructionDiscriminator: swapAToPInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.sourceTokenA,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenA,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenB,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.poolMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.poolToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenSwap,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenSwapAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenSwapProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
