import{R as q,v as K,t as D,o as _,V as C,W as y,a0 as t,i as T,$ as s,a2 as w,aa as I,as as Q,aL as L,a1 as P,X as O,Y as g,aE as R,j as r,aM as j,u as E,y as H,aN as z,C as G,aO as J,aP as X,aQ as Y,w as Z,x as ee,z as oe,ar as te,m as M,aR as ae,aS as $,aT as V,P as W,U as ne,Z as U,aU as se,aV as re,aW as le,a4 as F,a5 as N,_ as ie}from"./index-cbcb97d2.js";import{_ as ce}from"./SelectToken.vue_vue_type_script_setup_true_lang-90262c9d.js";import{u as ue,t as x}from"./swap-7e2b25c1.js";import"./associatedTokenAccount-96e9098e.js";const de={key:0,class:"policy-card__policy q-pa-md"},me={class:"policy-card__policy__info"},pe={class:"policy-card__policy__subtitle"},we={class:"policy-card__policy__subtitle"},ke=s("div",{class:"policy-card__policy__subtitle"}," Rules: ",-1),ye={class:"q-ml-xs"},_e={key:0},ve=q({__name:"SelectPolicyItem",props:{policyData:Object,policy:Object},setup(l){const o=K(),c=D(()=>o.serviceData),d=D(()=>o.serviceLoading);return(h,k)=>(_(),C(O,{class:""},{default:y(()=>[t(d)?P("",!0):(_(),T("div",de,[s("div",me,[s("div",pe," Address: "+w(l.policy?.toBase58()),1),s("div",we," Name: "+w(t(c)?.name)+" "+w(l.policyData?.name),1),ke,s("div",ye,[(_(!0),T(I,null,Q(l.policyData?.rules,(e,v)=>(_(),T("div",{key:v},[e.key!=="maxAge"&&e.key!=="expectedDateTo"||e.label!=="0"?(_(),T("span",_e,w(t(L)(e.key,e.label,e.value)),1)):P("",!0)]))),128))])])]))]),_:1}))}}),fe={key:0},Fe={key:1},Te=q({__name:"CreatePoolTokenData",props:{balance:[String,Number],mint:String},setup(l){return(o,c)=>(_(),T("div",null,[l.mint?(_(),T("div",fe,[s("div",null," balance: "+w(l.balance),1),s("div",null,[g(" mint: "+w(t(R)(l.mint))+" ",1),r(j,{anchor:"top middle",self:"bottom middle",offset:[10,10]},{default:y(()=>[g(w(l.mint),1)]),_:1})])])):(_(),T("div",Fe," Select token "))]))}});function he(){const l=E(),{notify:o}=H(),c=z(l,"cluster"),d=G(!1);async function h(k,{onSuccess:e,onError:v,idx:i,commitment:b=J,sendTimeout:B=X,confirmTimeout:A=Y}={}){i=i??"";let u=o({progress:!0,type:"ongoing",message:i?`Sending transaction "${i}" ...`:"Sending transaction...",timeout:B});const m={label:"Close",color:"white"};d.value=!0;let a="";try{const p=await k;a=String(typeof p=="object"?await p.signature:await k)}catch(p){d.value=!1,u(),String(p?.message).startsWith("User rejected")||o({message:i?`Transaction "${i}" error`:"Transaction error",caption:p?.message,type:"negative",timeout:0,actions:[m]});return}const f={label:"Explore",color:"white",target:"_blank",href:`https://solscan.io/tx/${a}?cluster=${c.value}`,onClick:()=>!1};try{u(),u=o({progress:!0,type:"ongoing",message:i?`Confirming transaction "${i}" ...`:"Confirming transaction...",actions:[f],timeout:A});const p=await l.connection.getLatestBlockhash(),n=await l.connection.confirmTransaction({blockhash:p.blockhash,lastValidBlockHeight:p.lastValidBlockHeight,signature:a},b);if(u(),n.value.err)throw new Error(JSON.stringify(n.value.err));u=o({message:i?`Transaction "${i}" confirmed`:"Transaction confirmed",type:"positive",actions:[f]}),e&&e(a)}catch(p){u(),o({message:i?`Transaction "${i}" error`:"Transaction error",caption:p.message,type:"negative",timeout:0,actions:[f,m]}),v&&v(p),console.error(p)}finally{d.value=!1}}return{monitorTransaction:h,sending:d}}function ge(){const l=ue(),o=Z(),{publicKey:c}=ee(),d=E(),{monitorTransaction:h}=he(),{notify:k}=H(),e=oe({tokenA:void 0,tokenB:void 0,policy:void 0,hostFeeNumerator:0,hostFeeDenominator:1e3,tradeFeeNumerator:0,tradeFeeDenominator:1e3,ownerTradeFeeNumerator:0,ownerTradeFeeDenominator:1e3,ownerWithdrawFeeNumerator:0,ownerWithdrawFeeDenominator:1e3,creating:!1,tokenSwap:void 0,poolMint:void 0,poolFeeAccount:void 0,swapTokenA:void 0,swapTokenB:void 0});async function v(){!c.value||!o.value||(e.tokenSwap=te.generate(),console.log("[create swap] token swap pk = ",e.tokenSwap.publicKey.toBase58()),console.log("[create swap] token swap sk = ",e.tokenSwap.secretKey.toString()))}async function i(){if(!c.value||!o.value||!e.tokenSwap)return;const u=l.swapClient.swapAuthority(e.tokenSwap.publicKey),m=new M,a=await ae(d.connection,m,c.value,u,9);console.log("[create swap] poolMint = ",a.publicKey.toBase58()),m.instructions.length>0&&await h($(d.connection,o.value,m.instructions,[a]),{onSuccess:()=>{e.poolMint=a.publicKey,k({type:"positive",message:"Pool mint created successfully."})}})}async function b(){if(!c.value||!o.value||!e.tokenSwap||!e.poolMint)return;if(!e.tokenA||!e.tokenB)return k({type:"negative",message:"Select tokens"});const u=l.swapClient.swapAuthority(e.tokenSwap.publicKey),m=new M,a=await V(d.connection,m,e.poolMint,c.value),S=await V(d.connection,m,new W(e.tokenA.mint),u,c.value,!0),f=await V(d.connection,m,new W(e.tokenB.mint),u,c.value,!0);console.log("[create swap] poolFeeAccount = ",a.toBase58()),console.log("[create swap] swapTokenA = ",S.toBase58()),console.log("[create swap] swapTokenB = ",f.toBase58()),m.instructions.length>0&&await h($(d.connection,o.value,m.instructions),{commitment:"finalized",onSuccess:()=>{e.poolFeeAccount=a,e.swapTokenA=S,e.swapTokenB=f,k({type:"positive",message:"Pool accounts created successfully."})}})}async function B(){if(!c.value||!o.value||!e.tokenSwap||!e.poolMint||!e.poolFeeAccount||!e.swapTokenA||!e.swapTokenB)return;if(!e.tokenA||!e.tokenB)return k({type:"negative",message:"Select tokens"});if(!e.policy)return k({type:"negative",message:"Select policy"});console.log("createTokenSwap: ",{tokenSwap:e.tokenSwap.publicKey.toBase58(),poolMint:e.poolMint.toBase58(),poolFee:e.poolFeeAccount.toBase58(),destination:e.poolFeeAccount.toBase58(),tokenA:e.swapTokenA.toBase58(),tokenB:e.swapTokenB.toBase58(),policy:e.policy.pubkey.toBase58(),curveType:x.ConstantProduct,curveParameters:[],fees:{tradeFeeNumerator:e.tradeFeeNumerator,tradeFeeDenominator:e.tradeFeeDenominator,ownerTradeFeeNumerator:e.ownerTradeFeeNumerator,ownerTradeFeeDenominator:e.ownerTradeFeeDenominator,ownerWithdrawFeeNumerator:e.ownerWithdrawFeeNumerator,ownerWithdrawFeeDenominator:e.ownerWithdrawFeeDenominator,hostFeeNumerator:e.hostFeeNumerator,hostFeeDenominator:e.hostFeeDenominator}});const u=await l.swapClient.createTokenSwap({tokenSwap:e.tokenSwap,poolMint:e.poolMint,poolFee:e.poolFeeAccount,destination:e.poolFeeAccount,tokenA:e.swapTokenA,tokenB:e.swapTokenB,policy:e.policy.pubkey,curveType:x.ConstantProduct,curveParameters:[],fees:{tradeFeeNumerator:e.tradeFeeNumerator,tradeFeeDenominator:e.tradeFeeDenominator,ownerTradeFeeNumerator:e.ownerTradeFeeNumerator,ownerTradeFeeDenominator:e.ownerTradeFeeDenominator,ownerWithdrawFeeNumerator:e.ownerWithdrawFeeNumerator,ownerWithdrawFeeDenominator:e.ownerWithdrawFeeDenominator,hostFeeNumerator:e.hostFeeNumerator,hostFeeDenominator:e.hostFeeDenominator}});k({type:"positive",message:`Swap Pool created successfully. ${e.tokenSwap?.publicKey.toBase58()}`}),console.log("[create swap] tokenSwap result = ",u)}function A(){e.hostFeeNumerator=0,e.hostFeeDenominator=1e3,e.tradeFeeNumerator=0,e.tradeFeeDenominator=1e3,e.ownerTradeFeeNumerator=0,e.ownerTradeFeeDenominator=1e3,e.ownerWithdrawFeeNumerator=0,e.ownerWithdrawFeeDenominator=1e3,e.policy=void 0,e.tokenA=void 0,e.tokenB=void 0}return{state:e,reset:A,generateSwapKeypair:v,createPoolMint:i,createPoolAccounts:b,createTokenSwap:B}}const Se={class:"row"},be={class:"row q-mt-md"},Be={class:"q-mt-md"},Ae=s("div",null,"Policy:",-1),De={class:"row q-mt-md"},Ne={class:"row q-mt-md"},Ce={class:"row q-mt-md"},Ve={class:"row q-mt-md"},Pe={class:"q-mt-lg row"},qe={class:"q-mt-mt"},Me=s("div",{class:"text-subtitle2"}," Token Swap ",-1),$e={style:{"word-break":"break-all"}},We={class:"q-mt-xl row"},Ue={class:"q-mt-xl row"},xe=s("div",{class:"text-warning"}," Top up pool tokenA and tokenB accounts before create pool ",-1),Ke={class:"q-mt-xl row"},Oe=q({__name:"CreateSwapCard",setup(l){const{state:o,createTokenSwap:c,createPoolAccounts:d,generateSwapKeypair:h,createPoolMint:k}=ge(),{handleSearchToken:e,tokens:v}=ne(),i=K(),b=D(()=>i.servicePolicy),B=D(()=>o.tokenA?i.tokenBalance(o.tokenA.mint):0),A=D(()=>o.tokenB?i.tokenBalance(o.tokenB.mint):0);function u(m,a){o[m]=a}return(m,a)=>{const S=ce,f=Te,p=ve;return _(),C(O,{class:"swap-cardswap-widget full-width"},{default:y(()=>[r(U,{class:"swap-card__header"},{default:y(()=>[g(" Create Pool ")]),_:1}),r(U,{class:"swap-card__body"},{default:y(()=>[s("div",Se,[r(S,{options:t(v),token:t(o).tokenA,"swap-token":String(t(o).tokenA?.symbol),onHandleSearchToken:t(e),onSetToken:a[0]||(a[0]=n=>u("tokenA",n))},null,8,["options","token","swap-token","onHandleSearchToken"]),r(f,{class:"q-ml-lg q-mt-xs",balance:t(B),mint:t(o).tokenA?.mint},null,8,["balance","mint"])]),s("div",be,[r(S,{options:t(v),token:t(o).tokenB,"swap-token":String(t(o).tokenB?.symbol),onHandleSearchToken:t(e),onSetToken:a[1]||(a[1]=n=>u("tokenB",n))},null,8,["options","token","swap-token","onHandleSearchToken"]),r(f,{class:"q-ml-lg q-mt-xs",balance:t(A),mint:t(o).tokenB?.mint},null,8,["balance","mint"])]),s("div",Be,[Ae,r(se,{modelValue:t(o).policy,"onUpdate:modelValue":a[2]||(a[2]=n=>t(o).policy=n),"option-disable":"inactive","popup-content-class":"transition-duration",outlined:"",options:t(b),dense:"","options-dense":!1,"option-value":"mint","option-label":"name"},{selected:y(()=>[t(o).policy?(_(),C(p,{key:t(o).policy.pubkey,policy:t(o).policy.pubkey,"policy-data":t(o).policy.data},null,8,["policy","policy-data"])):P("",!0)]),option:y(n=>[r(re,le(n.itemProps,{class:"token-select__token"}),{default:y(()=>[(_(),C(p,{key:n.opt.pubkey,policy:n.opt.pubkey,"policy-data":n.opt.data},null,8,["policy","policy-data"]))]),_:2},1040)]),_:1},8,["modelValue","options"])]),s("div",De,[r(F,{modelValue:t(o).hostFeeNumerator,"onUpdate:modelValue":a[3]||(a[3]=n=>t(o).hostFeeNumerator=n),class:"q-mr-md",label:"Host fee Numerator"},null,8,["modelValue"]),r(F,{modelValue:t(o).hostFeeDenominator,"onUpdate:modelValue":a[4]||(a[4]=n=>t(o).hostFeeDenominator=n),label:"Host fee Denominator"},null,8,["modelValue"])]),s("div",Ne,[r(F,{modelValue:t(o).tradeFeeNumerator,"onUpdate:modelValue":a[5]||(a[5]=n=>t(o).tradeFeeNumerator=n),class:"q-mr-md",label:"Trade fee Numerator"},null,8,["modelValue"]),r(F,{modelValue:t(o).tradeFeeDenominator,"onUpdate:modelValue":a[6]||(a[6]=n=>t(o).tradeFeeDenominator=n),label:"Trade fee Denominator"},null,8,["modelValue"])]),s("div",Ce,[r(F,{modelValue:t(o).ownerTradeFeeNumerator,"onUpdate:modelValue":a[7]||(a[7]=n=>t(o).ownerTradeFeeNumerator=n),class:"q-mr-md",label:"Owner trade fee Numerator"},null,8,["modelValue"]),r(F,{modelValue:t(o).ownerTradeFeeDenominator,"onUpdate:modelValue":a[8]||(a[8]=n=>t(o).ownerTradeFeeDenominator=n),label:"Owner trade fee Denominator"},null,8,["modelValue"])]),s("div",Ve,[r(F,{modelValue:t(o).ownerWithdrawFeeNumerator,"onUpdate:modelValue":a[9]||(a[9]=n=>t(o).ownerWithdrawFeeNumerator=n),class:"q-mr-md",label:"Owner withdraw fee Numerator"},null,8,["modelValue"]),r(F,{modelValue:t(o).ownerWithdrawFeeDenominator,"onUpdate:modelValue":a[10]||(a[10]=n=>t(o).ownerWithdrawFeeDenominator=n),label:"Owner withdraw fee Denominator"},null,8,["modelValue"])]),s("div",Pe,[r(N,{class:"q-ml-auto",onClick:t(h)},{default:y(()=>[g(" Generate Swap Keypair ")]),_:1},8,["onClick"])]),s("div",qe,[Me,s("div",null,"Public key: "+w(t(o).tokenSwap?.publicKey.toBase58()),1),s("div",$e," Secret key: "+w(t(o).tokenSwap?.secretKey.toString()),1)]),s("div",We,[r(N,{class:"q-ml-auto",onClick:t(k)},{default:y(()=>[g(" Create Pool Mint ")]),_:1},8,["onClick"])]),s("div",null,"Pool mint: "+w(t(o).poolMint?.toBase58()),1),s("div",Ue,[r(N,{class:"q-ml-auto",onClick:t(d)},{default:y(()=>[g(" Create Pool token accounts ")]),_:1},8,["onClick"])]),s("div",null,"Pool fee account: "+w(t(o).poolFeeAccount?.toBase58()),1),s("div",null,"Pool token A account: "+w(t(o).swapTokenA?.toBase58()),1),s("div",null,"Pool token B account: "+w(t(o).swapTokenB?.toBase58()),1),xe,s("div",Ke,[r(N,{class:"q-ml-auto",onClick:t(c)},{default:y(()=>[g(" Create Pool ")]),_:1},8,["onClick"])])]),_:1})]),_:1})}}}),Ee={},He={class:"main-block row justify-center"};function Ie(l,o){const c=Oe;return _(),T("div",He,[r(c,{class:"q-mt-md"})])}const ze=ie(Ee,[["render",Ie]]);export{ze as default};
